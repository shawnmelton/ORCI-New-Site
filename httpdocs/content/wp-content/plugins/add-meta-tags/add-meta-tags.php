<?php
/*
Plugin Name: Add Meta Tags
Plugin URI: http://www.g-loaded.eu/2006/01/05/add-meta-tags-wordpress-plugin/
Description: Adds the <em>Description</em> and <em>Keywords</em> XHTML META tags to your blog's <em>front page</em>, posts, pages, category-based archives and tag-based archives. Also adds <em>Opengraph</em> and <em>Dublin Core</em> metadata on posts and pages.
Version: 2.2.0
Author: George Notaras
Author URI: http://www.g-loaded.eu/
License: Apache License v2
*/

/**
 *  Copyright 2006-2013 George Notaras <gnot@g-loaded.eu>, CodeTRAX.org
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
*/


/**
 * Translation Domain
 *
 * Translation files are searched in: wp-content/plugins
 */
load_plugin_textdomain('add-meta-tags', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/');


/**
 * Settings Link in the ``Installed Plugins`` page
 */
function amt_plugin_actions( $links, $file ) {
    if( $file == plugin_basename(__FILE__) && function_exists( "admin_url" ) ) {
        $settings_link = '<a href="' . admin_url( 'options-general.php?page=add-meta-tags-options' ) . '">' . __('Settings') . '</a>';
        // Add the settings link before other links
        array_unshift( $links, $settings_link );
    }
    return $links;
}
add_filter( 'plugin_action_links', 'amt_plugin_actions', 10, 2 );


/**
 * Administration Panel - Add-Meta-Tags Settings
 */

function amt_add_pages() {
    add_options_page(__('Metadata Settings', 'add-meta-tags'), __('Metadata', 'add-meta-tags'), 'manage_options', 'add-meta-tags-options', 'amt_options_page');
}
add_action('admin_menu', 'amt_add_pages');


function amt_show_info_msg($msg) {
    echo '<div id="message" class="updated fade"><p>' . $msg . '</p></div>';
}


/**
 * Returns an array with the default options.
 */
function amt_get_default_options() {
    return array(
        "settings_version"  => 2,       // IMPORTANT: SETTINGS UPGRADE: Every time settings are added or removed this has to be incremented.
        "site_description"  => "",      // Front page description
        "site_keywords"     => "",      // Front page keywords
        "global_keywords"   => "",      // These keywords are added to the 'keywords' meta tag on all posts and pages
        "site_wide_meta"    => "",
        "auto_description"  => "1",     // Descriptions auto-generated by default
        "auto_keywords"     => "1",     // Keywords auto-generated by default
        "auto_opengraph"    => "0",
        "auto_dublincore"   => "0",
        "noodp_description" => "0",
        "noindex_search_results"     => "1",
        "noindex_date_archives"      => "0",
        "noindex_category_archives"  => "0",
        "noindex_tag_archives"       => "0",
        "noindex_author_archives"    => "0",
        "copyright_url"     => "",
        "default_image_url" => "",
        "i_have_donated"    => "0",
        );
}


/**
 * Performs upgrade of the plugin settings.
 */
function amt_plugin_upgrade() {

    // First we try to determine if this is a new installation or if the
    // current installation requires upgrade.

    // Default Add-Meta-Tags Settings
    $default_options = amt_get_default_options();

    // Try to get the current Add-Meta-Tags options from the database
    $stored_options = get_option("add_meta_tags_opts");
    if ( empty($stored_options) ) {
        // This is the first run, so set our defaults.
        update_option("add_meta_tags_opts", $default_options);
        return;
    }

    // Check the settings version

    // If the settings version of the default options matches the settings version
    // of the stored options, there is no need to upgrade.
    if (array_key_exists('settings_version', $stored_options) &&
            (intval($stored_options["settings_version"]) == intval($default_options["settings_version"])) ) {
        // Settings are up to date. No upgrade required.
        return;
    }

    // On any other case a settings upgrade is required.

    // 1) Add any missing options to the stored Add-Meta-Tags options
    foreach ($default_options as $opt => $value) {
        // Always upgrade the ``settings_version`` option
        if ($opt == 'settings_version') {
            $stored_options['settings_version'] = $value;
        }
        // Add missing options
        elseif ( !array_key_exists($opt, $stored_options) ) {
            $stored_options[$opt] = $value;
        }
        // Existing stored options are untouched here.
    }

    // 2) Migrate any current options to new ones.
    // Migration rules should go here.

    // Version 2.2.0 (settings_version 1->2)
    // Removed ``noindex_archives``
    // No migrations required. Clean-up takes place in step (3) below.

    // 3) Clean stored options.
    foreach ($stored_options as $opt => $value) {
        if ( !array_key_exists($opt, $default_options) ) {
            // Remove any options that do not exist in the default options.
            unset($stored_options[$opt]);
        }
    }

    // Finally save the updated options.
    update_option("add_meta_tags_opts", $stored_options);

}
add_action('plugins_loaded', 'amt_plugin_upgrade');


function amt_options_page() {
    // Permission Check
    if ( !current_user_can( 'manage_options' ) )  {
        wp_die( __( 'You do not have sufficient permissions to access this page.' ) );
    }

    // Default Add-Meta-Tags Settings
    $default_options = amt_get_default_options();

    if (isset($_POST['info_update'])) {

        // Update settings

        $add_meta_tags_opts = array();

        foreach ($default_options as $def_key => $def_value) {

            // **Always** use the ``settings_version`` from the defaults
            if ($def_key == 'settings_version') {
                $add_meta_tags_opts['settings_version'] = $def_value;
            }

            // Add options from the POST request (saved by the user)
            elseif ( array_key_exists($def_key, $_POST) ) {
                $add_meta_tags_opts[$def_key] = $_POST[$def_key];
            }
            
            // If missing (eg checkboxes), use the default value
            else {
                $add_meta_tags_opts[$def_key] = $def_value;
            }
        }

        // Finally update the Add-Meta-Tags options.
        update_option("add_meta_tags_opts", $add_meta_tags_opts);

        //var_dump($_POST);
        //var_dump($add_meta_tags_opts);

        amt_show_info_msg(__('Add-Meta-Tags options saved', 'add-meta-tags'));

    } elseif (isset($_POST["info_reset"])) {

        delete_option("add_meta_tags_opts");
        update_option("add_meta_tags_opts", $default_options);
        amt_show_info_msg(__('Add-Meta-Tags options were reset to defaults', 'add-meta-tags'));

    }

    // Get the options from the DB.
    $options = get_option("add_meta_tags_opts");

    // var_dump($options);

    /*
    Configuration Page
    */
    
    print('
    <div class="wrap">
        <div id="icon-options-general" class="icon32"><br /></div>
        <h2>'.__('Metadata Settings', 'add-meta-tags').'</h2>
        <p>'.__('Welcome to the administration panel of the Add-Meta-Tags plugin.', 'add-meta-tags').'</p>
        <p>'.__('<em>Metadata</em> refers to information that describes the content in a machine-friendly way. Search engines and other online services use this metadata to better understand your content. Keep in mind that metadata itself does not automatically make your blog rank better. For this to happen the content is still required to meet various quality standards. However, the presence of accurate and adequate metadata gives search engines and other services the chance to make less guesses about your content, index and categorize it better and, eventually, deliver it to an audience that finds it useful.  Good metadata facilitates this process and thus plays a significant role in achieving better rankings. This is what the Add-Meta-Tags plugin does.', 'add-meta-tags').'</p>
    </div>

    <div class="wrap" style="background: #EEF6E6; padding: 1em 2em; border: 1px solid #E4E4E4;' . (($options["i_have_donated"]=="1") ? ' display: none;' : '') . '">
        <h2>'.__('Message from the author', 'add-meta-tags').'</h2>
        <p style="font-size: 1.2em; padding-left: 2em;">'.__('<em>Add-Meta-Tags</em> is released under the terms of the <a href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache License version 2</a> and, therefore, is <strong>free software</strong>.', 'add-meta-tags').'</p>
        <p style="font-size: 1.2em; padding-left: 2em;">'.__('However, a significant amount of <strong>time</strong> and <strong>energy</strong> has been put into developing this plugin, so, its production has not been free from cost. If you find this plugin useful and if it has helped your blog get indexed better and rank higher, I would appreciate an <a href="http://www.g-loaded.eu/about/donate/">extra cup of coffee</a>.', 'add-meta-tags').'</p>
        <p style="font-size: 1.2em; padding-left: 2em;">'.__('Thank you in advance,', 'add-meta-tags').'<br />'.__('George Notaras', 'add-meta-tags').'</p>
        <div style="text-align: right;"><small>'.__('This message can be deactivated in the settings below.', 'add-meta-tags').'</small></div>
    </div>

    <div class="wrap">
        <h2>'.__('How it works', 'add-meta-tags').'</h2>
        
        <p>'.__('Add-Meta-Tags tries to follow the "<em>It just works</em>" principal. By default, the <em>description</em> and <em>keywords</em> meta tags are added to your blog\'s front page, posts, pages, category and tag based archives. Furthermore, it is possible to enable the insertion of <em>Opengraph</em> and <em>Dublin Core</em> metadata to your posts and pages. The plugin also supports some extra SEO related functionality that helps you fine tune your web site.', 'add-meta-tags').'</p>
        
        <p>'.__('Customization of the added metadata on a per post/page basis is possible by using the user-friendly <strong>WordPress meta boxes</strong> in the post/page editing panel. In earlier versions of the plugin (before 2.1.0) such customization was possible through custom fields. If you have already used custom fields in order to customize the posts description and keywords in the past, there is nothing to worry about, since the new meta-box functionality is internally based on those custom fields, so there is no migration procedure involved. However, you need to enable the <em>Metadata</em> meta box in the <a href="http://en.support.wordpress.com/screen-options/">Screen Options</a> of the post/page editing panel.', 'add-meta-tags').'</p>

    </div>

    <div class="wrap">
        <h2>'.__('Configuration', 'add-meta-tags').'</h2>

        <p>'.__('This section contains global configuration options for the metadata that is added to your web site.', 'add-meta-tags').'</p>

        

        <form name="formamt" method="post" action="' . $_SERVER['REQUEST_URI'] . '">

        <table class="form-table">
        <tbody>
    ');

    if ( amt_has_page_on_front() ) {

        /* Options:

            Example No pages
            +-----------+----------------+--------------+----------+
            | option_id | option_name    | option_value | autoload |
            +-----------+----------------+--------------+----------+
            |        58 | show_on_front  | posts        | yes      |
            |        93 | page_for_posts | 0            | yes      |
            |        94 | page_on_front  | 0            | yes      |
            +-----------+----------------+--------------+----------+

            Example pages as front page and posts page
            +-----------+----------------+--------------+----------+
            | option_id | option_name    | option_value | autoload |
            +-----------+----------------+--------------+----------+
            |        58 | show_on_front  | page         | yes      |
            |        93 | page_for_posts | 28           | yes      |
            |        94 | page_on_front  | 25           | yes      |
            +-----------+----------------+--------------+----------+

        */
        print('
            <tr valign="top">
            <th scope="row">'.__('Front Page Metadata', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Front Page Metadata', 'add-meta-tags').'</span></legend>
                '.__('It appears that you use static pages on the <em>front</em> page and the <em>posts</em> index of this web site. Please visit the editing panel of these pages and set the <code>description</code> and <code>keywords</code> meta tags in the relevant Metadata box. (since v2.2.0)', 'add-meta-tags').'
                ');
                print('<ul>');
                $front_page_id = get_option('page_on_front');
                if ( intval($front_page_id) > 0 ) {
                    print('<li>&raquo; '.__('Edit the', 'add-meta-tags').' <a href="'.get_edit_post_link(intval($front_page_id)).'">'.__('front page', 'add-meta-tags').'</a></li>');
                }
                $posts_page_id = get_option('page_for_posts');
                if ( intval($posts_page_id) > 0 ) {
                    print('<li>&raquo; '.__('Edit the', 'add-meta-tags').' <a href="'.get_edit_post_link(intval($posts_page_id)).'">'.__('posts page', 'add-meta-tags').'</a></li>');
                }
                print('</ul>');
        print('
            </fieldset>
            </td>
            </tr>
        ');

    } else {

        print('
            <tr valign="top">
            <th scope="row">'.__('Front Page Description', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Front Page Description', 'add-meta-tags').'</span></legend>
                <label for="site_description">
                    <textarea name="site_description" id="site_description" cols="100" rows="2" class="code">' . stripslashes($options["site_description"]) . '</textarea>
                    <br />
                    '.__('Enter a short (150-250 characters long) description of your blog. This text will be used in the <em>description</em> meta tag and the <em>og:description</em> meta property (if Opengraph is enabled) on the <strong>front page</strong>. If this is left empty, then the blog\'s description from the <em>Tagline</em> in <a href="' . get_bloginfo('wpurl') . '/wp-admin/options-general.php">General Options</a> will be used.', 'add-meta-tags').'
                </label>
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Front Page Keywords', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Front Page Keywords', 'add-meta-tags').'</span></legend>
                <label for="site_keywords">
                    <textarea name="site_keywords" id="site_keywords" cols="100" rows="2" class="code">' . stripslashes($options["site_keywords"]) . '</textarea>
                    <br />
                    '.__('Enter a comma-delimited list of keywords for your blog. These keywords will be used for the <em>keywords</em> meta tag on the <strong>front page</strong>. If this field is left empty, then all of your blog\'s <a href="' . get_bloginfo('wpurl') . '/wp-admin/edit-tags.php?taxonomy=category">categories</a> will be used as keywords for the <em>keywords</em> meta tag.', 'add-meta-tags').'
                    <br />
                    <strong>'.__('Example', 'add-meta-tags').'</strong>: <code>'.__('keyword1, keyword2, keyword3', 'add-meta-tags').'</code>
                </label>
            </fieldset>
            </td>
            </tr>
        ');
    }

    print('
            <tr valign="top">
            <th scope="row">'.__('Global Keywords', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Global Keywords', 'add-meta-tags').'</span></legend>
                <label for="global_keywords">
                    <textarea name="global_keywords" id="global_keywords" cols="100" rows="2" class="code">' . stripslashes($options["global_keywords"]) . '</textarea>
                    <br />
                    '.__('Enter a comma-delimited list of global keywords which will be added before the keywords of <strong>all</strong> posts and pages.', 'add-meta-tags').'
                    <br />
                    <strong>'.__('Example', 'add-meta-tags').'</strong>: <code>'.__('keyword1, keyword2, keyword3', 'add-meta-tags').'</code>
                    <br />
                    '.__('By default, these keywords are prepended to the post/page\'s keywords. For enhanced flexibility, it is possible to use the <code>%contentkw%</code> placeholder, which will be populated with the post/page\'s autogenerated or user-defined keywords. This way you can globally both prepend and append keywords to the <em>keywords</em> of your content.', 'add-meta-tags').'
                    <br />
                    <strong>'.__('Example', 'add-meta-tags').'</strong>: <code>'.__('keyword1, keyword2, %contentkw%, keyword3', 'add-meta-tags').'</code>
                </label>
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Site-wide META tags', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Site-wide META tags', 'add-meta-tags').'</span></legend>
                <label for="site_wide_meta">
                    <textarea name="site_wide_meta" id="site_wide_meta" cols="100" rows="10" class="code">' . stripslashes($options["site_wide_meta"]) . '</textarea>
                    <br />
                    '.__('Provide the <strong>full XHTML code</strong> of META tags you would like to be included in <strong>all</strong> of your blog pages.', 'add-meta-tags').'
                    <br />
                    <strong>'.__('Examples', 'add-meta-tags').'</strong>:
                    <br /><code>&lt;meta name="google-site-verification" content="1234567890" /&gt;</code>
                    <br /><code>&lt;meta name="msvalidate.01" content="1234567890" /&gt;</code>
                </label>
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Automatic Basic Metadata', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Automatic Basic Metadata', 'add-meta-tags').'</span></legend>

                <input id="auto_description" type="checkbox" value="1" name="auto_description" '. (($options["auto_description"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="auto_description">
                '.__('Automatically generate the <em>description</em> meta tag for single posts, pages, category-based archives and tag-based archives. If this is unchecked, you can still set a <em>description</em> meta tag by using the <code>description</code> custom field.', 'add-meta-tags').'
                </label>
                <br />
                
                <input id="auto_keywords" type="checkbox" value="1" name="auto_keywords" '. (($options["auto_keywords"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="auto_keywords">
                '.__('Automatically generate the <em>keywords</em> meta tag for single posts, category-based archives and tag-based archives. Automatic keywords are not supported on pages. If this is unchecked, you can still set a <em>keywords</em> meta tag by using the <code>keywords</code> custom field.', 'add-meta-tags').'
                </label>
                <br />

            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Automatic Opengraph Metadata', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Automatic Opengraph Metadata', 'add-meta-tags').'</span></legend>

                <input id="auto_opengraph" type="checkbox" value="1" name="auto_opengraph" '. (($options["auto_opengraph"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="auto_opengraph">
                '.__('Automatically generate Opengraph meta tags for single posts and pages. For more information, please refer to the <a href="http://ogp.me">Opengraph specification</a>.', 'add-meta-tags').'
                </label>
                <br />
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Automatic Dublin Core Metadata', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Automatic Dublin Core Metadata', 'add-meta-tags').'</span></legend>

                <input id="auto_dublincore" type="checkbox" value="1" name="auto_dublincore" '. (($options["auto_dublincore"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="auto_dublincore">
                '.__('Automatically generate Dublin Core metadata for single posts and pages. For more information, please refer to <a href="http://dublincore.org">Dublin Core Metadata Initiative</a>.', 'add-meta-tags').'
                </label>
                <br />
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Extra SEO Options', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Extra SEO Options', 'add-meta-tags').'</span></legend>

                <input id="noodp_description" type="checkbox" value="1" name="noodp_description" '. (($options["noodp_description"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="noodp_description">
                '.__('Add <code>NOODP</code> and <code>NOYDIR</code> to the <em>robots</em> meta tag on the front page, posts and pages. This setting will prevent all search engines (at least those that support the meta tag) from displaying information from the <a href="http://www.dmoz.org/">Open Directory Project</a> or the <a href="http://dir.yahoo.com/">Yahoo Directory</a> instead of the description you set in the <em>description</em> meta tag.', 'add-meta-tags').'
                </label>
                <br />
                <br />

                '.__('Add <code>NOINDEX,FOLLOW</code> to the <em>robots</em> meta tag on following types of archives. This is an advanced setting that aims at reducing the amount of duplicate content that gets indexed by search engines:', 'add-meta-tags').'
                <br />

                <input id="noindex_search_results" type="checkbox" value="1" name="noindex_search_results" '. (($options["noindex_search_results"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="noindex_search_results">
                '.__('Search results (<em>Highly recommended</em>)', 'add-meta-tags').'
                </label>
                <br />

                <input id="noindex_date_archives" type="checkbox" value="1" name="noindex_date_archives" '. (($options["noindex_date_archives"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="noindex_date_archives">
                '.__('Date based archives (<em>Recommended</em>)', 'add-meta-tags').'
                </label>
                <br />

                <input id="noindex_category_archives" type="checkbox" value="1" name="noindex_category_archives" '. (($options["noindex_category_archives"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="noindex_category_archives">
                '.__('Category based archives', 'add-meta-tags').'
                </label>
                <br />

                <input id="noindex_tag_archives" type="checkbox" value="1" name="noindex_tag_archives" '. (($options["noindex_tag_archives"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="noindex_tag_archives">
                '.__('Tag based archives', 'add-meta-tags').'
                </label>
                <br />

                <input id="noindex_author_archives" type="checkbox" value="1" name="noindex_author_archives" '. (($options["noindex_author_archives"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="noindex_author_archives">
                '.__('Author based archives', 'add-meta-tags').'
                </label>
                <br />

            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Copyright URL', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Copyright URL', 'add-meta-tags').'</span></legend>
                <input name="copyright_url" type="text" id="copyright_url" class="code" value="' . $options["copyright_url"] . '" size="100" maxlength="1024" />
                <br />
                <label for="copyright_url">
                '.__('Add an absolute URL to a document containing information about copyright. The relevant meta tags will be added automatically.', 'add-meta-tags').'
                <br />
                <strong>'.__('Example', 'add-meta-tags').'</strong>: <code>http://example.org/copyright.html</code>
                </label>
                <br />
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Default Image', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Default Image', 'add-meta-tags').'</span></legend>
                <input name="default_image_url" type="text" id="default_image_url" class="code" value="' . $options["default_image_url"] . '" size="100" maxlength="1024" />
                <br />
                <label for="default_image_url">
                '.__('Add an absolute URL to an image that will be used in meta data in case a featured image has not been set for the content.', 'add-meta-tags').'
                <br />
                <strong>'.__('Example', 'add-meta-tags').'</strong>: <code>http://example.org/images/default.png</code>
                </label>
                <br />
            </fieldset>
            </td>
            </tr>

            <tr valign="top">
            <th scope="row">'.__('Donations', 'add-meta-tags').'</th>
            <td>
            <fieldset>
                <legend class="screen-reader-text"><span>'.__('Donations', 'add-meta-tags').'</span></legend>

                <input id="i_have_donated" type="checkbox" value="1" name="i_have_donated" '. (($options["i_have_donated"]=="1") ? 'checked="checked"' : '') .'" />
                <label for="i_have_donated">
                '.__('By checking this, the <em>message from the author</em> above goes away. Thanks for <a href="http://www.g-loaded.eu/about/donate/">donating</a>!', 'add-meta-tags').'
                </label>
                <br />
            </fieldset>
            </td>
            </tr>

        </tbody>
        </table>

        <p class="submit">
            <input id="submit" class="button-primary" type="submit" value="'.__('Save Changes', 'add-meta-tags').'" name="info_update" />
            <input id="reset" class="button-primary" type="submit" value="'.__('Reset to defaults', 'add-meta-tags').'" name="info_reset" />
        </p>

        </form>
        
    </div>

    <div class="wrap"> 

        <h2>'.__('Documentation', 'add-meta-tags').'</h2>
        <p>'.__('The following notes explain how metadata is added to your content and how it is possible to customize it.', 'add-meta-tags').'</p>

        <h3>'.__('Meta Tags on the Front Page', 'add-meta-tags').'</h3>
        <p>'.__('A <em>description</em> meta tag is automatically added to the web site\'s front page, even when a static page is used as the home page. By default, the site description from the settings above is used or, if it has not been set, the blog description is used. If this hasn\'t been set too, then the meta tag is not added.', 'add-meta-tags').'</p>
        <p>'.__('A <em>keywords</em> meta tag is automatically added to the web site\'s front page, even when a static page is used as the home page. By default, the site keywords from the settings above are used or, if it has not been set, all the blog categories (except for the <em>Uncategorized</em> category) are used.', 'add-meta-tags').'</p>

        <h3>'.__('Metadata on Posts', 'add-meta-tags').'</h3>
        <p>'.__('A <em>description</em> meta tag is automatically generated from the content and added to posts. It is possible to set a custom description for posts in the <em>Metadata</em> meta box in the post editing panel.', 'add-meta-tags').'</p>
        <p>'.__('A <em>keywords</em> meta tag is added automatically to pages. By default, the post\'s categories and tags are used. It is possible to set custom keywords for posts in the <em>Metadata</em> meta box in the post editing panel.', 'add-meta-tags').'</p>

        <h3>'.__('Metadata on Pages', 'add-meta-tags').'</h3>
        <p>'.__('A <em>description</em> meta tag is automatically generated from the content and added to pages. It is possible to set a custom description for pages in the <em>Metadata</em> meta box in the page editing panel.', 'add-meta-tags').'</p>
        <p>'.__('A <em>keywords</em> meta tag <strong>is not</strong> added automatically to pages. It is possible to set keywords for pages in the <em>Metadata</em> meta box in the page editing panel.', 'add-meta-tags').'</p>

        <h3>'.__('Metadata on Attachment Pages', 'add-meta-tags').'</h3>
        <p>'.__('A <em>description</em> meta tag is automatically generated from the caption or, if a caption has not been set, from the description of the attachment.', 'add-meta-tags').'</p>
        <p>'.__('A <em>keywords</em> meta tag <strong>is not</strong> added to attachment pages.', 'add-meta-tags').'</p>

        <h3>'.__('Metadata on Custom Post Types', 'add-meta-tags').'</h3>
        <p>'.__('A <em>description</em> meta tag is automatically generated from the first paragraph of the content. No automatic keywords.', 'add-meta-tags').'</p>
        <p>'.__('It is possible to set a custom <em>description</em> and <em>keywords</em> meta tag by adding a description and a list of keywords in the Metadata metabox in the post editing panel.', 'add-meta-tags').'</p>

        <h3>'.__('Metadata on Category and Tag Archives', 'add-meta-tags').'</h3>
        <p>'.__('A <em>description</em> meta tag is automatically added to category-based and tag-based archives, only if a description has been set for that specific category or tag.', 'add-meta-tags').'</p>
        <p>'.__('A <em>keywords</em> meta tag is always added automatically to category-based and tag-based archives. The value of the meta tag is set to the category or tag name respectively.', 'add-meta-tags').'</p>

    </div>

    ');

}


/**
 * Meta box in post/page editing panel.
 */

/* Define the custom box */
add_action( 'add_meta_boxes', 'amt_add_metadata_box' );

/**
 * Adds a box to the main column of the editing panel of the supported post types.
 * See the amt_get_supported_post_types() docstring for more info on the supported types.
 */
function amt_add_metadata_box() {
    $supported_types = amt_get_supported_post_types();

    // Add an Add-Meta-Tags meta box to all supported types
    foreach ($supported_types as $supported_type) {
        add_meta_box( 
            'amt-metadata-box',
            __( 'Metadata', 'add-meta-tags' ),
            'amt_inner_metadata_box',
            $supported_type,
            'advanced',
            'high'
        );
    }

}


/**
 * Load CSS and JS for metadata box.
 * The editing pages are post.php and post-new.php
 */
add_action('admin_print_styles-post.php', 'amt_metadata_box_css_js');
add_action('admin_print_styles-post-new.php', 'amt_metadata_box_css_js');

function amt_metadata_box_css_js () {
    // $supported_types = amt_get_supported_post_types();
    // See: #900 for details
    // wp_enqueue_script('jquery-ui-core');
    // wp_enqueue_script('jquery-ui-tabs');
}


/* For future reference - Add data to the HEAD area of post editing panel
add_action('admin_head-post.php', 'amt_js_head');
add_action('admin_head-post-new.php', 'amt_js_head');
function amt_js_head() {
}
*/


/* Prints the box content */
function amt_inner_metadata_box( $post ) {

    // Use a nonce field for verification
    wp_nonce_field( plugin_basename( __FILE__ ), 'amt_noncename' );

    // Get the post type. Will be used to customize the displayed notes.
    $post_type = get_post_type( $post->ID );

    // Display the meta box HTML code.

    // Custom description
    
    // Retrieve the field data from the database.
    $custom_description_value = amt_get_post_meta_description( $post->ID );

    print('
        <p>
            <label for="amt_custom_description">'.__('Description', 'add-meta-tags').':</label>
            <textarea class="code" style="width: 99%" id="amt_custom_description" name="amt_custom_description" cols="30" rows="2" >'.$custom_description_value.'</textarea>
            <br>
            (Enter a custom description of 20-40 words - based on an average word length of 5 characters)
        </p>
    ');
    // Different notes based on post type
    if ( $post_type == 'post' ) {
        print('
            <p>
                If the <em>description</em> field is left blank, a <em>description</em> meta tag will be <strong>automatically</strong> generated from the excerpt or, if an excerpt has not been set, directly from the first paragraph of the content.
            </p>
        ');
    } elseif ( $post_type == 'page' ) {
        print('
            <p>
                If the <em>description</em> field is left blank, a <em>description</em> meta tag will be <strong>automatically</strong> generated from the first paragraph of the content.
            </p>
        ');
    } else {    // Custom post types
        print('
            <p>
                If the <em>description</em> field is left blank, a <em>description</em> meta tag will be <strong>automatically</strong> generated from the first paragraph of the content.
            </p>
        ');
    }

    // Custom keywords

    // Retrieve the field data from the database.
    $custom_keywords_value = amt_get_post_meta_keywords( $post->ID );

    // Alt input:  <input type="text" class="code" style="width: 99%" id="amt_custom_keywords" name="amt_custom_keywords" value="'.$custom_keywords_value.'" />
    print('
        <p>
            <label for="amt_custom_keywords">'.__('Keywords', 'add-meta-tags').':</label>
            <textarea class="code" style="width: 99%" id="amt_custom_keywords" name="amt_custom_keywords" cols="30" rows="2" >'.$custom_keywords_value.'</textarea>
            <br>
            (Separate keywords with commas)
        </p>
    ');
    // Different notes based on post type
    if ( $post_type == 'post' ) {
        print('
            <p>
                If the <em>keywords</em> field is left blank, a <em>keywords</em> meta tag will be <strong>automatically</strong> generated from the post\'s categories and tags. In case you decide to set a custom list of keywords for this post, it is possible to easily include the post\'s categories and keywords in that list by using the special placeholders <code>%cats%</code> and <code>%tags%</code> respectively.
                <br />
                Example: <code>keyword1, keyword2, %cats%, keyword3, %tags%, keyword4</code>
            </p>
        ');
    } elseif ( $post_type == 'page' ) {
        print('
            <p>
                If the <em>keywords</em> field is left blank, a <em>keywords</em> meta tag <strong>will not be automatically</strong> generated.
            </p>
        ');
    } else {    // Custom post types
        print('
            <p>
                If the <em>keywords</em> field is left blank, a <em>keywords</em> meta tag <strong>will not be automatically</strong> generated.
            </p>
        ');
    }

    // Advanced options

    // Custom title tag

    // Retrieve the field data from the database.
    $custom_title_value = amt_get_post_meta_title( $post->ID );

    print('
        <p>
            <label for="amt_custom_title">'.__('Title', 'add-meta-tags').':</label>
            <input type="text" class="code" style="width: 99%" id="amt_custom_title" name="amt_custom_title" value="'.$custom_title_value.'" />
            <br>
            Enter a custom title to be used in the <em>title</em> tag. <code>%title%</code> is expanded to the current title.
        </p>
    ');

    // 'news_keywords' meta tag
    
    // Retrieve the field data from the database.
    $custom_newskeywords_value = amt_get_post_meta_newskeywords( $post->ID );

    print('
        <p>
            <label for="amt_custom_newskeywords">'.__('News Keywords', 'add-meta-tags').':</label>
            <input type="text" class="code" style="width: 99%" id="amt_custom_newskeywords" name="amt_custom_newskeywords" value="'.$custom_newskeywords_value.'" />
            <br>
            Enter a comma-delimited list of <strong>news keywords</strong>. For more info about this meta tag, please see this <a target="_blank" href="http://support.google.com/news/publisher/bin/answer.py?hl=en&answer=68297">Google help page</a>.
        </p>
    ');

    // per post full meta tags
    
    // Retrieve the field data from the database.
    $custom_full_metatags_value = amt_get_post_meta_full_metatags( $post->ID );

    print('
        <p>
            <label for="amt_custom_full_metatags">'.__('Full meta tags', 'add-meta-tags').':</label>
            <textarea class="code" style="width: 99%" id="amt_custom_full_metatags" name="amt_custom_full_metatags" cols="30" rows="2" >'.$custom_full_metatags_value.'</textarea>
            <br>
            Enter full meta tags specific to this content.
        </p>
    ');

}


/* Manage the entered data */
add_action( 'save_post', 'amt_save_postdata', 10, 2 );

/* When the post is saved, saves our custom description and keywords */
function amt_save_postdata( $post_id, $post ) {

    // Verify if this is an auto save routine. 
    // If it is our form has not been submitted, so we dont want to do anything
    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) 
        return;

    /* Verify the nonce before proceeding. */
    // Verify this came from the our screen and with proper authorization,
    // because save_post can be triggered at other times
    if ( !isset($_POST['amt_noncename']) || !wp_verify_nonce( $_POST['amt_noncename'], plugin_basename( __FILE__ ) ) )
        return;

    /* Get the post type object. */
	$post_type_obj = get_post_type_object( $post->post_type );

    /* Check if the current user has permission to edit the post. */
	if ( !current_user_can( $post_type_obj->cap->edit_post, $post_id ) )
		return;

    // OK, we're authenticated: we need to find and save the data

    // Sanitize user input
    // $description_value = sanitize_text_field( $_POST['amt_custom_description'] );
    // TODO: sanitize removes '%ca' part of '%cats%'
    // $keywords_value = sanitize_text_field( $_POST['amt_custom_keywords'] );
    $description_value = $_POST['amt_custom_description'];
    $keywords_value = $_POST['amt_custom_keywords'];
    $title_value = $_POST['amt_custom_title'];
    $newskeywords_value = $_POST['amt_custom_newskeywords'];
    $full_metatags_value = $_POST['amt_custom_full_metatags'];

    // If a value has not been entered we try to delete existing data from the database
    // If the user has entered data, store it in the database.

    // Add-Meta-Tags custom field names
    $amt_description_field_name = '_amt_description';
    $amt_keywords_field_name = '_amt_keywords';
    $amt_title_field_name = '_amt_title';
    $amt_newskeywords_field_name = '_amt_news_keywords';
    $amt_full_metatags_field_name = '_amt_full_metatags';

    // Description
    if ( empty($description_value) ) {
        delete_post_meta($post_id, $amt_description_field_name);
        // Also clean up old description field
        delete_post_meta($post_id, 'description');
    } else {
        update_post_meta($post_id, $amt_description_field_name, $description_value);
        // Also clean up again old description field - no need to exist any more since the new field is used.
        delete_post_meta($post_id, 'description');
    }

    // Keywords
    if ( empty($keywords_value) ) {
        delete_post_meta($post_id, $amt_keywords_field_name);
        // Also clean up old keywords field
        delete_post_meta($post_id, 'keywords');
    } else {
        update_post_meta($post_id, $amt_keywords_field_name, $keywords_value);
        // Also clean up again old keywords field - no need to exist any more since the new field is used.
        delete_post_meta($post_id, 'keywords');
    }

    // Title
    if ( empty($title_value) ) {
        delete_post_meta($post_id, $amt_title_field_name);
    } else {
        update_post_meta($post_id, $amt_title_field_name, $title_value);
    }

    // 'news_keywords'
    if ( empty($newskeywords_value) ) {
        delete_post_meta($post_id, $amt_newskeywords_field_name);
    } else {
        update_post_meta($post_id, $amt_newskeywords_field_name, $newskeywords_value);
    }

    // per post full meta tags
    if ( empty($full_metatags_value) ) {
        delete_post_meta($post_id, $amt_full_metatags_field_name);
    } else {
        update_post_meta($post_id, $amt_full_metatags_field_name, $full_metatags_value);
    }
    
}


//
// Core
//


function amt_strtolower($text) {
    /*
    Helper function that converts $text to lowercase.
    If the mbstring php plugin exists, then the string functions provided by that
    plugin are used.
    */
    if (function_exists('mb_strtolower')) {
        return mb_strtolower($text, get_bloginfo('charset'));
    } else {
        return strtolower($text);
    }
}



function amt_clean_desc($desc) {
    /*
     * This is a filter for the description metatag text.
     */

    $desc = stripslashes($desc);
    $desc = strip_tags($desc);
    $desc = htmlspecialchars($desc);
    // Clean double quotes
    $desc = str_replace('"', '', $desc);
    //$desc = preg_replace('/(\n+)/', ' ', $desc);
    $desc = preg_replace('/([\n \t\r]+)/', ' ', $desc); 
    $desc = preg_replace('/( +)/', ' ', $desc);

    // Remove shortcode
    $pattern = get_shortcode_regex();
    //var_dump($pattern);
    $desc = preg_replace('#' . $pattern . '#s', '', $desc);

    return trim($desc);
}


function amt_process_paged($metadata) {
    /*
     * Accepts any piece of metadata. Checks if current post is paged and, if yes,
     * then it adds the (page N) suffix.
     */
    global $paged;

    if (!empty($metadata)) {
        if ( $paged ) {
            $metadata .= ' - Page ' . $paged;
        }
    }

    return $metadata;
}


function amt_get_the_excerpt($excerpt_max_len = 300, $desc_avg_length = 250, $desc_min_length = 150) {
    /*
    Returns the post's excerpt.
    This was written in order to get the excerpt *outside* the loop
    because the get_the_excerpt() function does not work there any more.
    This function makes the retrieval of the excerpt independent from the
    WordPress function in order not to break compatibility with older WP versions.
    
    Also, this is even better as the algorithm tries to get text of average
    length 250 characters, which is more SEO friendly. The algorithm is not
    perfect, but will do for now.
    */
    global $posts;

    if ( empty($posts[0]->post_excerpt) ) {

        /*
        Get the initial data for the excerpt
        */
        $amt_excerpt = strip_tags(substr($posts[0]->post_content, 0, $excerpt_max_len));

        /*
        If this was not enough, try to get some more clean data for the description (nasty hack)
        */
        if ( strlen($amt_excerpt) < $desc_avg_length ) {
            $amt_excerpt = strip_tags(substr($posts[0]->post_content, 0, (int) ($excerpt_max_len * 1.5)));
            if ( strlen($amt_excerpt) < $desc_avg_length ) {
                $amt_excerpt = strip_tags(substr($posts[0]->post_content, 0, (int) ($excerpt_max_len * 2)));
            }
        }

        $end_of_excerpt = strrpos($amt_excerpt, ".");

        if ($end_of_excerpt) {
            /*
            if there are sentences, end the description at the end of a sentence.
            */
            $amt_excerpt_test = substr($amt_excerpt, 0, $end_of_excerpt + 1);

            if ( strlen($amt_excerpt_test) < $desc_min_length ) {
                /*
                don't end at the end of the sentence because the description would be too small
                */
                $amt_excerpt .= "...";
            } else {
                /*
                If after ending at the end of a sentence the description has an acceptable length, use this
                */
                $amt_excerpt = $amt_excerpt_test;
            }
        } else {
            /*
            otherwise (no end-of-sentence in the excerpt) add this stuff at the end of the description.
            */
            $amt_excerpt .= "...";
        }

    } else {
        /*
        When the post excerpt has been set explicitly, then it has priority.
        */
        $amt_excerpt = $posts[0]->post_excerpt;
    }

    /**
     * In some cases, the algorithm might not work, depending on the content.
     * In those cases, $amt_excerpt might only contain ``...``. Here we perform
     * a check for this and return an empty $amt_excerpt.
     */
    if ($amt_excerpt == "...") {
        $amt_excerpt = "";
    }

    return $amt_excerpt;
}


function amt_get_keywords_from_post_cats() {
    /*
    Returns a comma-delimited list of a post's categories.
    */
    global $posts;

    $postcats = "";
    foreach((get_the_category($posts[0]->ID)) as $cat) {
        $postcats .= $cat->cat_name . ', ';
    }
    // strip final comma
    $postcats = substr($postcats, 0, -2);

    return $postcats;
}


function amt_get_first_category() {
    // Helper function. Returns the first category the post belongs to.
    $cats = amt_strtolower(amt_get_keywords_from_post_cats());
    $bits = explode(',', $cats);
    if (!empty($bits)) {
        return $bits[0];
    }
    return '';
}


function amt_get_post_tags() {
    /*
    Retrieves the post's user-defined tags.
    
    This will only work in WordPress 2.3 or newer. On older versions it will
    return an empty string.
    */
    global $posts;
    
    if ( version_compare( get_bloginfo('version'), '2.3', '>=' ) ) {
        $tags = get_the_tags($posts[0]->ID);
        if ( empty( $tags ) ) {
            return false;
        } else {
            $tag_list = "";
            foreach ( $tags as $tag ) {
                $tag_list .= $tag->name . ', ';
            }
            $tag_list = amt_strtolower(rtrim($tag_list, " ,"));
            return $tag_list;
        }
    } else {
        return "";
    }
}


function amt_get_all_categories($no_uncategorized = TRUE) {
    /*
    Returns a comma-delimited list of all the blog's categories.
    The built-in category "Uncategorized" is excluded.
    */
    global $wpdb;

    if ( version_compare( get_bloginfo('version'), '2.3', '>=' ) ) {
        $cat_field = "name";
        $sql = "SELECT name FROM $wpdb->terms LEFT OUTER JOIN $wpdb->term_taxonomy ON ($wpdb->terms.term_id = $wpdb->term_taxonomy.term_id) WHERE $wpdb->term_taxonomy.taxonomy = 'category' ORDER BY name ASC";
    } else {
        $cat_field = "cat_name";
        $sql = "SELECT cat_name FROM $wpdb->categories ORDER BY cat_name ASC";
    }
    $categories = $wpdb->get_results($sql);
    if ( empty( $categories ) ) {
        return "";
    } else {
        $all_cats = "";
        foreach ( $categories as $cat ) {
            if ($no_uncategorized && $cat->$cat_field != "Uncategorized") {
                $all_cats .= $cat->$cat_field . ', ';
            }
        }
        $all_cats = amt_strtolower(rtrim($all_cats, " ,"));
        return $all_cats;
    }
}


function amt_get_site_wide_metatags($site_wide_meta) {
    /*
    This is a filter for the site-wide meta tags.
    */
    $site_wide_meta = stripslashes($site_wide_meta);
    $site_wide_meta = trim($site_wide_meta);
    return $site_wide_meta;
}


/**
 * Helper function that returns an array containing the post types that are
 * supported by Add-Meta-Tags. These include:
 *
 *   - post
 *   - page
 *
 * And also to ALL public custom post types which have a UI.
 *
 * NOTE ABOUT attachments:
 * The 'attachment' post type does not support saving custom fields like other post types.
 * See: http://www.codetrax.org/issues/875
 */
function amt_get_supported_post_types() {
    $supported_builtin_types = array('post', 'page');
    $public_custom_types = get_post_types( array('public'=>true, '_builtin'=>false, 'show_ui'=>true) );
    $supported_types = array_merge($supported_builtin_types, $public_custom_types);
    return $supported_types;
}


/**
 * Helper function that returns the value of the custom field that contains
 * the content description.
 * The default field name for the description has changed to ``_amt_description``.
 * For easy migration this function supports reading the description from the
 * old ``description`` custom field and also from the custom field of other plugins.
 */
function amt_get_post_meta_description($post_id) {
    $amt_description_field_name = '_amt_description';

    // Get an array of all custom fields names of the post
    $custom_fields = get_post_custom_keys($post_id);

    // Just return an empty string if no custom fields have been associated with this content.
    if ( empty($custom_fields) ) {
        return '';
    }

    // First try our default description field
    if ( in_array($amt_description_field_name, $custom_fields) ) {
        return get_post_meta($post_id, $amt_description_field_name, true);
    }
    // Try old description field: ``description``
    elseif ( in_array('description', $custom_fields) ) {
        return get_post_meta($post_id, 'description', true);
    }
    // Try other description field names here.
    // Support reading from other plugins

    //Return empty string if all fails
    return '';
}


/**
 * Helper function that returns the value of the custom field that contains
 * the content keywords.
 * The default field name for the keywords has changed to ``_amt_keywords``.
 * For easy migration this function supports reading the keywords from the
 * old ``keywords`` custom field and also from the custom field of other plugins.
 */
function amt_get_post_meta_keywords($post_id) {
    $amt_keywords_field_name = '_amt_keywords';

    // Get an array of all custom fields names of the post
    $custom_fields = get_post_custom_keys($post_id);

    // Just return an empty string if no custom fields have been associated with this content.
    if ( empty($custom_fields) ) {
        return '';
    }

    // First try our default keywords field
    if ( in_array($amt_keywords_field_name, $custom_fields) ) {
        return get_post_meta($post_id, $amt_keywords_field_name, true);
    }
    // Try old keywords field: ``keywords``
    elseif ( in_array('keywords', $custom_fields) ) {
        return get_post_meta($post_id, 'keywords', true);
    }
    // Try other keywords field names here.
    // Support reading from other plugins

    //Return empty string if all fails
    return '';
}


/**
 * Helper function that returns the value of the custom field that contains
 * the custom content title.
 * The default field name for the title is ``_amt_title``.
 * No need to migrate from older field name.
 */
function amt_get_post_meta_title($post_id) {
    $amt_title_field_name = '_amt_title';

    // Get an array of all custom fields names of the post
    $custom_fields = get_post_custom_keys($post_id);

    // Just return an empty string if no custom fields have been associated with this content.
    if ( empty($custom_fields) ) {
        return '';
    }

    // First try our default title field
    if ( in_array($amt_title_field_name, $custom_fields) ) {
        return get_post_meta($post_id, $amt_title_field_name, true);
    }
    
    // Try other title field names here.
    // Support reading from other plugins

    //Return empty string if all fails
    return '';
}


/**
 * Helper function that returns the value of the custom field that contains
 * the 'news_keywords' value.
 * The default field name for the 'news_keywords' is ``_amt_news_keywords``.
 * No need to migrate from older field name.
 */
function amt_get_post_meta_newskeywords($post_id) {
    $amt_newskeywords_field_name = '_amt_news_keywords';

    // Get an array of all custom fields names of the post
    $custom_fields = get_post_custom_keys($post_id);

    // Just return an empty string if no custom fields have been associated with this content.
    if ( empty($custom_fields) ) {
        return '';
    }

    // First try our default 'news_keywords' field
    if ( in_array($amt_newskeywords_field_name, $custom_fields) ) {
        return get_post_meta($post_id, $amt_newskeywords_field_name, true);
    }
    
    // Try other 'news_keywords' field names here.
    // Support reading from other plugins

    //Return empty string if all fails
    return '';
}


/**
 * Helper function that returns the value of the custom field that contains
 * the per-post full metatags.
 * The default field name is ``_amt_full_metatags``.
 * No need to migrate from older field name.
 */
function amt_get_post_meta_full_metatags($post_id) {
    $amt_full_metatags_field_name = '_amt_full_metatags';

    // Get an array of all custom fields names of the post
    $custom_fields = get_post_custom_keys($post_id);

    // Just return an empty string if no custom fields have been associated with this content.
    if ( empty($custom_fields) ) {
        return '';
    }

    // First try our default 'full_metatags' field
    if ( in_array($amt_full_metatags_field_name, $custom_fields) ) {
        return get_post_meta($post_id, $amt_full_metatags_field_name, true);
    }
    
    // Try other 'full_metatags' field names here.
    // Support reading from other plugins

    //Return empty string if all fails
    return '';
}


/** Helper function that returns true if a page is used as the homepage
 * instead of the posts index page.
 */
function amt_has_page_on_front() {
    $front_type = get_option('show_on_front', 'posts');
    if ( $front_type == 'page' ) {
        return true;
    }
    return false;
}


function amt_get_content_description($auto=true) {
    /*
     * This is a helper function that returns the post's or page's description.
     */
    global $posts;

    $content_description = '';

    if ( is_single() || is_page() ) {   // is_single() is true for attachments and custom post types too

        // The custom post field "description" overrides post's excerpt in Single Post View.
        $desc_fld_content = amt_get_post_meta_description( $posts[0]->ID );
        if ( !empty($desc_fld_content) ) {
            // If there is a custom field, use it
            $content_description = amt_clean_desc($desc_fld_content);
        } else {
            // Else, use the post's excerpt. Valid for Pages too.
            if ($auto) {
                $content_description = amt_clean_desc(amt_get_the_excerpt());
            }
        }
    }
    return $content_description;
}


function amt_get_content_keywords($auto=true) {
    /*
    This is a helper function that returns the post's or page's keywords.
    */
    global $posts;

    $content_keywords = '';

    /*
     * Custom post field "keywords" overrides post's categories and tags (tags exist in WordPress 2.3 or newer).
     * %cats% is replaced by the post's categories.
     * %tags% us replaced by the post's tags.
     */
    if ( ( is_single()) || is_page() ) {    // is_single() is true for attachments and custom post types too
        $keyw_fld_content = amt_get_post_meta_keywords( $posts[0]->ID );
        if ( !empty($keyw_fld_content) ) {
            // If there is a custom field, use it
            if ( is_single() ) {
                // On single posts, the %cat% tag is replaced by the post's categories
                $keyw_fld_content = str_replace("%cats%", amt_get_keywords_from_post_cats(), $keyw_fld_content);
                // Also, the %tags% tag is replaced by the post's tags (WordPress 2.3 or newer)
                if ( version_compare( get_bloginfo('version'), '2.3', '>=' ) ) {
                    $keyw_fld_content = str_replace("%tags%", amt_get_post_tags(), $keyw_fld_content);
                }
            }
            $content_keywords .= amt_strtolower($keyw_fld_content);
        } elseif ( is_single() ) {  // pages do not support categories and tags
            if ($auto) {
                /*
                 * Add keywords automatically.
                 * Keywords consist of the post's categories and the post's tags (tags exist in WordPress 2.3 or newer).
                 */
                $content_keywords .= amt_strtolower(amt_get_keywords_from_post_cats());
                $post_tags = amt_strtolower(amt_get_post_tags());
                if (!empty($post_tags)) {
                    $content_keywords .= ", " . $post_tags;
                }
            }
        }
    }

    /**
     * Finally, add the global keyword, if they are set in the administration panel.
     * If $content_keywords is empty, then no global keyword processing takes place.
     */
    if ( !empty($content_keywords) && (is_single() || is_page()) ) {    // is_single() is true for attachments and custom post types too
        $options = get_option("add_meta_tags_opts");
        $global_keywords = $options["global_keywords"];
        if (!empty($global_keywords)) {
            if ( strpos($global_keywords, '%contentkw%') ) {
                // The user has used the placeholder ``%contentkw%``. Replace it with the content keywords.
                $content_keywords = str_replace('%contentkw%', $content_keywords, $global_keywords);
            } else {
                // The placeholder ``%contentkw%`` has not been used. Append the content keywords to the global keywords.
                $content_keywords = $global_keywords . ', ' . $content_keywords;
            }
        }
    }

    return $content_keywords;
}


function amt_get_content_keywords_mesh() {
    // Keywords returned in the form: keyword1;keyword2;keyword3
    $keywords = explode(', ', amt_get_content_keywords());
    return implode(';', $keywords);
}


function amt_add_meta_tags() {
    /*
     * This is the main function that actually writes the meta tags to the
     * appropriate page.
     */
    global $posts;
    global $paged;

    // Get the options the DB
    $options = get_option("add_meta_tags_opts");
    $do_auto_description = (($options["auto_description"] == "1") ? true : false );
    $do_auto_keywords = (($options["auto_keywords"] == "1") ? true : false );
    $do_noodp_description = (($options["noodp_description"] == "1") ? true : false );

    // Array to store metadata
    $metadata_arr = array();

    /**
     * NOODP on posts and pages
     */
    if ( $do_noodp_description && (is_front_page() || is_single() || is_page()) ) {
        $metadata_arr[] = '<meta name="robots" content="NOODP,NOYDIR" />';
    }

    /**
     * Basic Meta tags
     */

    if ( !amt_has_page_on_front() && is_front_page() ) {    // Enters only if posts are used as the front page.
        /*
         * Add META tags to Home Page
         * Description and Keywords from the Add-Meta-Tags settings override default behaviour
         *
         * Description and Keywords are always set on the front page regardless of the
         * auto_description and auto_keywords setings.
         */

        // Description
        // First use the site description from the Add-Meta-Tags settings
        $site_description = $options["site_description"];
        if (empty($site_description)) {
            // Alternatively, use the blog description
            $site_description = get_bloginfo('description');
        }

        if ( !empty($site_description) ) {
            // If $site_description is not empty, then use it in the description meta-tag of the front page
            $metadata_arr[] = '<meta name="description" content="' . amt_process_paged(amt_clean_desc($site_description)) . '" />';
        }

        // Keywords
        $site_keywords = $options["site_keywords"];
        if (empty($site_keywords)) {
            // Alternatively, use the blog categories
            $site_keywords = amt_get_all_categories();
        }

        if ( !empty($site_keywords) ) {
            // If $site_keywords is not empty, then use it in the keywords meta-tag of the front page
            $metadata_arr[] = '<meta name="keywords" content="' . $site_keywords . '" />';
        }


    } elseif ( is_single() || is_page() ) {
        /*
         * Add META tags to Single Page View or Page
         */

        // Description
        $description = amt_get_content_description($auto=$do_auto_description);
        if (!empty($description)) {
            $metadata_arr[] = '<meta name="description" content="' . $description . '" />';
        }

        // Keywords
        $keywords = amt_get_content_keywords($auto=$do_auto_keywords);
        if (!empty($keywords)) {
            $metadata_arr[] = '<meta name="keywords" content="' . amt_strtolower($keywords) . '" />';
        }

        // 'news_keywords'
        $newskeywords = amt_get_post_meta_newskeywords( $posts[0]->ID );
        if (!empty($newskeywords)) {
            $metadata_arr[] = '<meta name="news_keywords" content="' . $newskeywords . '" />';
        }

        // per post full meta tags
        $full_metatags_for_content = amt_get_post_meta_full_metatags( $posts[0]->ID );
        if (!empty($full_metatags_for_content)) {
            $metadata_arr[] = $full_metatags_for_content;
        }


    } elseif ( is_category() ) {
        /*
         * Write a description META tag only if a description for the current category has been set.
         */
        if ($do_auto_description) {
            $description_content = amt_clean_desc(category_description());
            if (!empty($description_content)) {
                $metadata_arr[] = '<meta name="description" content="' . amt_process_paged($description_content) . '" />';
            }
        }
        
        /*
         * Write a keyword metatag if there is a category name (always)
         */
        if ($do_auto_keywords) {
            $cur_cat_name = single_cat_title($prefix = '', $display = false );
            if ( !empty($cur_cat_name) ) {
                $metadata_arr[] = '<meta name="keywords" content="' . amt_strtolower($cur_cat_name) . '" />';
            }
        }

    } elseif ( is_tag() ) {
        /*
         * Writes a description META tag only if a description for the current tag has been set.
         */
        if ($do_auto_description) {
            $description_content = amt_clean_desc(tag_description());
            if (!empty($description_content)) {
                $metadata_arr[] = '<meta name="description" content="' . amt_process_paged($description_content) . '" />';
            }
        }
        
        /*
         * Write a keyword metatag if there is a tag name (always)
         */
        if ($do_auto_keywords) {
            $cur_tag_name = single_tag_title($prefix = '', $display = false );
            if ( !empty($cur_tag_name) ) {
                $metadata_arr[] = '<meta name="keywords" content="' . amt_strtolower($cur_tag_name) . '" />';
            }
        }
    }

    // Add site wide meta tags
    if (!empty($options["site_wide_meta"])) {
        $metadata_arr[] = amt_get_site_wide_metatags($options["site_wide_meta"]);
    }

    // On every page print the copyright head link
    if (!empty($options["copyright_url"])) {
        $metadata_arr[] = '<link rel="copyright" type="text/html" title="' . get_bloginfo('name') . ' Copyright Information" href="' . trim($options["copyright_url"]) . '" />';
    }

    return $metadata_arr;
}



/*
Template Tags
*/
function amt_content_description() {
    echo amt_get_content_description();
}

function amt_content_keywords() {
    echo amt_get_content_keywords();
}

function amt_content_keywords_mesh() {
    // Keywords echoed in the form: keyword1;keyword2;keyword3
    echo amt_get_content_keywords_mesh();
}


/**
 * Opengraph helper functions
 */

function amt_get_video_url() {
    global $post;

    // Youtube
    $pattern = '#youtube.com/watch\?v=([-|~_0-9A-Za-z]+)#';
    if ( preg_match($pattern, $post->post_content, $matches) ) {
        return 'http://youtube.com/v/' . $matches[1];
    }

    // Vimeo
    $pattern = '#vimeo.com/([-|~_0-9A-Za-z]+)#';
    if ( preg_match($pattern, $post->post_content, $matches) ) {
        return 'http://vimeo.com/couchmode/' . $matches[1];
    }

    return '';
}


/**
 * Opengraph metadata on posts and pages
 * Opengraph Specification: http://ogp.me
 */

function amt_add_opengraph_metadata() {

    global $post;

    /*
    Get the options the DB
    */
    $options = get_option("add_meta_tags_opts");
    $auto_opengraph = $options["auto_opengraph"];
    $do_auto_opengraph = (($options["auto_opengraph"] == "1") ? true : false );
    if (!$do_auto_opengraph) {
        return array();
    }

    $metadata_arr = array();

    if ( !amt_has_page_on_front() && is_front_page() ) {    // Enters only if posts are used as the front page.

        $metadata_arr[] = '<meta property="og:title" content="' . amt_process_paged(get_bloginfo('name')) . '" />';
        $metadata_arr[] = '<meta property="og:type" content="website" />';
        $metadata_arr[] = '<meta property="og:locale" content="' . str_replace('-', '_', get_bloginfo('language')) . '" />';
        $metadata_arr[] = '<meta property="og:site_name" content="' . get_bloginfo('name') . '" />';
        // Site description
        if (!empty($options["site_description"])) {
            $metadata_arr[] = '<meta property="og:description" content="' . amt_process_paged($options["site_description"]) . '" />';
        } elseif (get_bloginfo('description')) {
            $metadata_arr[] = '<meta property="og:description" content="' . amt_process_paged(get_bloginfo('description')) . '" />';
        }
        // Site Image
        // If a static page has been used as the front page and a feature image
        // has been set for that page, use its thumbnail as the 'site image'.
        // Otherwise, use the default image.
        if (function_exists('has_post_thumbnail') && has_post_thumbnail()) {
            $thumbnail_info = wp_get_attachment_image_src( get_post_thumbnail_id($post->ID), 'thumbnail' );
            $metadata_arr[] = '<meta property="og:image" content="' . $thumbnail_info[0] . '" />';  // src url
            //$metadata_arr[] = '<meta property="og:image:secure_url" content="' . str_replace('http:', 'https:', $thumbnail_info[0]) . '" />';
            $metadata_arr[] = '<meta property="og:image:width" content="' . $thumbnail_info[1] . '" />';
            $metadata_arr[] = '<meta property="og:image:height" content="' . $thumbnail_info[2] . '" />';
        } elseif (!empty($options["default_image_url"])) {
            $metadata_arr[] = '<meta property="og:image" content="' . trim($options["default_image_url"]) . '" />';
        }

    } elseif ( is_single() || is_page()) {

        $metadata_arr[] = '<meta property="og:title" content="' . single_post_title('', FALSE) . '" />';
        $metadata_arr[] = '<meta property="og:url" content="' . get_permalink() . '" />';
        // We use the description defined by Add-Meta-Tags
        $content_desc = amt_get_content_description();
        if ( !empty($content_desc) ) {
            $metadata_arr[] = '<meta property="og:description" content="' . $content_desc . '" />';
        }
        $metadata_arr[] = '<meta property="og:locale" content="' . str_replace('-', '_', get_bloginfo('language')) . '" />';
        $metadata_arr[] = '<meta property="og:site_name" content="' . get_bloginfo('name') . '" />';
        
        // Image
        if (function_exists('has_post_thumbnail') && has_post_thumbnail()) {
            $thumbnail_info = wp_get_attachment_image_src( get_post_thumbnail_id($post->ID), 'thumbnail' );
            $metadata_arr[] = '<meta property="og:image" content="' . $thumbnail_info[0] . '" />';
            //$metadata_arr[] = '<meta property="og:image:secure_url" content="' . str_replace('http:', 'https:', $thumbnail_info[0]) . '" />';
            $metadata_arr[] = '<meta property="og:image:width" content="' . $thumbnail_info[1] . '" />';
            $metadata_arr[] = '<meta property="og:image:height" content="' . $thumbnail_info[2] . '" />';
        } elseif ( is_attachment() && wp_attachment_is_image($post->ID) ) { // is attachment page and contains an image
            $attachment_image_info = wp_get_attachment_image_src( get_post_thumbnail_id($post->ID), 'large' );
            $metadata_arr[] = '<meta property="og:image" content="' . $attachment_image_info[0] . '" />';
            //$metadata_arr[] = '<meta property="og:image:secure_url" content="' . str_replace('http:', 'https:', $attachment_image_info[0]) . '" />';
            $metadata_arr[] = '<meta property="og:image:width" content="' . $attachment_image_info[1] . '" />';
            $metadata_arr[] = '<meta property="og:image:height" content="' . $attachment_image_info[2] . '" />';
        } elseif (!empty($options["default_image_url"])) {
            // Alternatively, use default image
            $metadata_arr[] = '<meta property="og:image" content="' . trim($options["default_image_url"]) . '" />';
        }

        // Video
        $video_url = amt_get_video_url();
        if (!empty($video_url)) {
            $metadata_arr[] = '<meta property="og:video" content="' . $video_url . '" />';
        }

        /**
         * We treat all post formats as articles.
         */

        $metadata_arr[] = '<meta property="og:type" content="article" />';
        $metadata_arr[] = '<meta property="article:published_time" content="' . get_the_time('c') . '" />';
        $metadata_arr[] = '<meta property="article:modified_time" content="' . get_the_modified_time('c') . '" />';
        // We use the first category as the section
        $first_cat = amt_get_first_category();
        if (!empty($first_cat)) {
            $metadata_arr[] = '<meta property="article:section" content="' . $first_cat . '" />';
        }
        $metadata_arr[] = '<meta property="article:author" content="' . get_the_author_meta('display_name', $post->post_author) . '" />';
        // Keywords are listed as post tags
        $keywords = explode(', ', amt_get_content_keywords());
        foreach ($keywords as $tag) {
            if (!empty($tag)) {
                $metadata_arr[] = '<meta property="article:tag" content="' . $tag . '" />';
            }
        }
    }

    return $metadata_arr;
}



/**
 * Dublin Core helper functions
 */
function amt_get_dublin_core_author_notation($post) {
    $last_name = get_the_author_meta('last_name', $post->post_author);
    $first_name = get_the_author_meta('first_name', $post->post_author);
    if ( empty($last_name) && empty($first_name) ) {
        return get_the_author_meta('display_name', $post->post_author);
    }
    return $last_name . ', ' . $first_name;
}


/**
 * Dublin Core metadata on posts and pages
 * http://dublincore.org/documents/dcmi-terms/
 * 
 */

function amt_add_dublin_core_metadata() {
    global $post;

    if ( !is_single() && !is_page()) {
        // Dublin Core metadata has a meaning for content only.
        return array();
    }

    // Get the options the DB
    $options = get_option("add_meta_tags_opts");
    $auto_dublincore = $options["auto_dublincore"];
    $do_auto_dublincore = (($options["auto_dublincore"] == "1") ? true : false );
    if (!$do_auto_dublincore) {
        return array();
    }

    $metadata_arr = array();
    $metadata_arr[] = '<meta name="dcterms.identifier" scheme="dcterms.uri" content="' . get_permalink() . '" />';
    $metadata_arr[] = '<meta name="dc.title" content="' . single_post_title('', FALSE) . '" />';
    $metadata_arr[] = '<meta name="dc.creator" content="' . amt_get_dublin_core_author_notation($post) . '" />';
    $metadata_arr[] = '<meta name="dc.date" scheme="dc.w3cdtf" content="' . get_the_time('c') . '" />';
    // We use the same description as the ``description`` meta tag.
    $content_desc = amt_get_content_description();
    if ( !empty($content_desc) ) {
        $metadata_arr[] = '<meta name="dc.description" content="' . $content_desc . '" />';
    }
    // Keywords are in the form: keyword1;keyword2;keyword3
    $metadata_arr[] = '<meta name="dc.subject" content="' . amt_get_content_keywords_mesh() . '" />';
    $metadata_arr[] = '<meta name="dc.language" scheme="dcterms.rfc4646" content="' . get_bloginfo('language') . '" />';
    $metadata_arr[] = '<meta name="dc.publisher" scheme="dcterms.uri" content="' . get_bloginfo('url') . '" />';
    // Copyright page
    if (!empty($options["copyright_url"])) {
        $metadata_arr[] = '<meta name="dcterms.rights" scheme="dcterms.uri" content="' . get_bloginfo('url') . '" />';
    }
    // The following requires creative commons configurator
    if (function_exists('bccl_get_license_url')) {
        $metadata_arr[] = '<meta name="dcterms.license" scheme="dcterms.uri" content="' . bccl_get_license_url() . '" />';
    }

    $metadata_arr[] = '<meta name="dc.coverage" content="World" />';

    /**
     * WordPress Post Formats: http://codex.wordpress.org/Post_Formats
     * Dublin Core Format: http://dublincore.org/documents/dcmi-terms/#terms-format
     * Dublin Core DCMIType: http://dublincore.org/documents/dcmi-type-vocabulary/
     */

    /**
     * TREAT ALL POST FORMATS AS TEXT (for now)
     */
    $metadata_arr[] = '<meta name="dc.type" scheme="DCMIType" content="Text" />';
    $metadata_arr[] = '<meta name="dc.format" scheme="dcterms.imt" content="text/html" />';

    /**
    $format = get_post_format( $post->id );
    if ( empty($format) || $format=="aside" || $format=="link" || $format=="quote" || $format=="status" || $format=="chat") {
        // Default format
        $metadata_arr[] = '<meta name="dc.type" scheme="DCMIType" content="Text" />';
        $metadata_arr[] = '<meta name="dc.format" scheme="dcterms.imt" content="text/html" />';
    } elseif ($format=="gallery") {
        $metadata_arr[] = '<meta name="dc.type" scheme="DCMIType" content="Collection" />';
        // $metadata_arr[] = '<meta name="dc.format" scheme="dcterms.imt" content="image" />';
    } elseif ($format=="image") {
        $metadata_arr[] = '<meta name="dc.type" scheme="DCMIType" content="Image" />';
        // $metadata_arr[] = '<meta name="dc.format" scheme="dcterms.imt" content="image/png" />';
    } elseif ($format=="video") {
        $metadata_arr[] = '<meta name="dc.type" scheme="DCMIType" content="Moving Image" />';
        $metadata_arr[] = '<meta name="dc.format" scheme="dcterms.imt" content="application/x-shockwave-flash" />';
    } elseif ($format=="audio") {
        $metadata_arr[] = '<meta name="dc.type" scheme="DCMIType" content="Sound" />';
        $metadata_arr[] = '<meta name="dc.format" scheme="dcterms.imt" content="audio/mpeg" />';
    }
    */

    return $metadata_arr;
}


/*
Final
*/

/**
 * Uses the custom title, if one has been set.
 */
function amt_custom_title_tag($title) {
    global $posts;

    if ( is_single() || is_page() ) {   // is_single() is true for attachments and custom post types
        $custom_title = amt_get_post_meta_title( $posts[0]->ID );
        if ( !empty($custom_title) ) {
            $custom_title = str_replace('%title%', $title, $custom_title);
            return $custom_title;
        }
    }

    return $title;
}
add_filter('wp_title', 'amt_custom_title_tag');


function amt_add_metadata() {

    // Get the options the DB
    $options = get_option("add_meta_tags_opts");
    $do_add_metadata = true;

    $metadata_arr = array();
    $metadata_arr[] = "";
    $metadata_arr[] = "<!-- BEGIN Metadata added by Add-Meta-Tags WordPress plugin";
    $metadata_arr[] = "Get the plugin at: http://www.g-loaded.eu/2006/01/05/add-meta-tags-wordpress-plugin/ -->";

    // Check for NOINDEX,FOLLOW on archives.
    // There is no need to further process metadata as we explicitly ask search
    // engines not to index the content.
    if ( is_archive() || is_search() ) {
        if (
            ( is_search() && ($options["noindex_search_results"] == "1") )  ||          // Search results
            ( is_date() && ($options["noindex_date_archives"] == "1") )  ||             // Date and time archives
            ( is_category() && ($options["noindex_category_archives"] == "1") )  ||     // Category archives
            ( is_tag() && ($options["noindex_tag_archives"] == "1") )  ||               // Tag archives
            ( is_author() && ($options["noindex_author_archives"] == "1") )             // Author archives
        ) {
            $metadata_arr[] = '<meta name="robots" content="NOINDEX,FOLLOW" />';
            $do_add_metadata = false;   // No need to process metadata
        }
    }

    // Add Metadata
    if ($do_add_metadata) {
        // Basic Meta tags
        $metadata_arr = array_merge($metadata_arr, amt_add_meta_tags());
        //var_dump(amt_add_meta_tags());
        // Add Opengraph
        $metadata_arr = array_merge($metadata_arr, amt_add_opengraph_metadata());
        // Add Dublin Core
        $metadata_arr = array_merge($metadata_arr, amt_add_dublin_core_metadata());
    }
    $metadata_arr[] = "<!-- END Metadata added by Add-Meta-Tags WordPress plugin -->";
    $metadata_arr[] = "";
    $metadata_arr[] = "";

    echo implode("\n", $metadata_arr);
}

add_action('wp_head', 'amt_add_metadata', 0);

?>